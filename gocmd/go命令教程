1.go build
  源码文件:命令源码文件、库源码文件和测试源码文件
  命令源码文件总是作为可执行的程序的入口。
  库源码文件一般用于集中放置各种待被使用的程序实体（全局常量、全局变量、接口、结构体、函数等等）。
  而测试源码文件主要用于对前两种源码文件中的程序实体的功能和性能进行测试。另外，后者也可以用于展现前两者中程序的使用方法

  注意点:
  1)go build命令在编译只包含库源码文件的代码包（或者同时编译多个代码包）时，只会做检查性的编译，而不会输出任何结果文件
    就是这个包不是命令源文件,就是有main包下的main函数,只会做检查性的编译
  2)只能编译一个命令源文件所在包
    main\linklist.go:9:6: main redeclared in this block
    这个也可以理解
    在我们同时编译多个main包的源码文件时，要保证其中有且仅有一个main函数声明，否则编译是无法成功的

  3) 常用标记
    标记名称	标记描述
    -a	强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。
    -n	打印编译期间所用到的其它命令，但是并不真正执行它们。
    -p n	指定编译过程中执行各任务的并行数量（确切地说应该是并发数量）。在默认情况下，该数量等于CPU的逻辑核数。但是在darwin/arm平台（即iPhone和iPad所用的平台）下，该数量默认是1。
    -race	开启竞态条件的检测。不过此标记目前仅在linux/amd64、freebsd/amd64、darwin/amd64和windows/amd64平台下受到支持。
    -v	打印出那些被编译的代码包的名字。
    -work	打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。
    -x	打印编译期间所用到的其它命令。注意它与-n标记的区别。

    一个具体的例子:
    go build -a -v -p 4 -work -race github.com/lihuicms-code-rep/godatastructure/main
  4)  编译代码包的顺序(重要) 依赖代码包 -> 当前代码包 -> 触发代码包
      使用-p 1来设定
2. go install
   go install命令只比go build命令多做了一件事，即：安装编译后的结果文件到指定目录 gopath/bin/
3. go get
   如果想要强行更新代码包，可以在执行go get命令时加入-u标记
